{"version":3,"sources":["components/layout/Main.js","idb/pictures.js","redux/pictures.saga.js","redux/pictures.js","components/layout/tabPanel/Tabs.js","components/layout/tabPanel/index.js","components/layout/tabPanel/TopButtons.js","components/layout/tabPanel/TopFilter.js","components/layout/tabPanel/Content.js","components/common/SVG.js","components/common/FileUploader.js","components/parts/Images.js","components/common/Button.js","components/common/Select.js","components/container/ImagesContainer.js","components/layout/pattern/ToggleWrapper.js","components/layout/pattern/ToggleTitle.js","components/layout/pattern/ToggleContent.js","components/parts/pattern/SetImage.js","components/common/Color.js","components/parts/pattern/SetColor.js","components/common/Range.js","components/parts/pattern/SetCVSize.js","components/parts/pattern/SetImgSize.js","components/parts/pattern/SetGapSize.js","components/parts/pattern/SetType.js","components/container/PatternsContainer.js","lib/myPattern.js","lib/myCanvas.js","utils/commonUtils.js","components/parts/Canvas.js","components/container/CanvasContainer.js","components/container/TabPanelContainer.js","App.js","reportWebVitals.js","redux/index.js","utils/style/global.js","index.js"],"names":["MainWrapper","styled","main","Header","header","MainContents","section","Main","children","DB_NAME","STORE_PICTURES","initIdb","a","openDB","upgrade","db","createObjectStore","keyPath","autoIncrement","createIndex","getAll","result","close","addPicture","payload","add","get","deletePicture","tx","transaction","store","count","id","delete","done","getPicturesSaga","addPictureSaga","deletePictureSaga","call","api","pictures","put","type","console","log","action","pictureSaga","GET_PICTURES","GET_PICTURES_SUCCESS","ADD_PICTURE","ADD_PICTURE_SUCCESS","DELETE_PICTURE","DELETE_PICTURE_SUCCESS","ADD_SELECTED_PICTURES","DELETE_SELECTED_PICTURES","CLEAR_SELECTED_PICTURES","CHANGE_DRWAN_PICTURE","CHANGE_CANVAS_MODE","CHANGE_PROPERTIES","clearSelectedPictures","changeDrawnPicture","changeCanvasMode","takeEvery","initialData","properties","color","canvasWidth","canvasHeight","imgWidth","imgHeight","gap","initialState","selectedPictures","drawnPicture","canvasMode","Ul","ul","Li","li","props","isActive","Tabs","React","memo","tabs","activeTab","handleTab","map","tab","index","TabItem","onClick","Wrapper","div","target","ContentWrapper","TabPanel","flex","TopButtons","TopFilter","Content","Block","svg","margin","SVG","path","xmlns","viewBox","d","fillRule","clipRule","FileInput","input","attrs","Label","label","FileUploader","useSelector","state","fileRef","useRef","dispatch","useDispatch","htmlFor","aria-label","name","onChange","e","reader","FileReader","readAsDataURL","files","addEventListener","src","img","Image","onload","width","height","MAX_WIDTH","MAX_HEIGHT","resizeImgae","w","h","c","document","createElement","ctx","getContext","drawImage","toDataURL","getResizedSrc","this","ref","isSelected","Img","SelectBlock","Images","selectedType","selectedList","onToggle","filteredImages","useMemo","length","filter","pic","filterListByType","bool","includes","ImageItem","alt","button","padding","Button","select","Option","option","Select","data","selectRef","handleFocus","current","size","handleBlur","handleChange","blur","useEffect","removeEventListener","value","optionName","ButtonInner","ImagesContainer","typeList","find","t","push","addTypeList","useState","setSelectedType","setSelectedList","useCallback","item","concat","addSelectedPictures","alert","link","href","p","download","click","ToggleWrapper","selected","ToggleTitle","handleSelected","column","css","ToggleContent","SetImage","selectedCrop","setSelectedCrop","Input","setProperties","debounceChange","debounce","ColorCode","SetColor","Color","RangeInput","Range","Inner","SetCVSize","defaultProps","nodes","querySelectorAll","canvasRef","userSize","setUserSize","isEqual","min","max","step","SetImgSize","SetGapSize","SetType","SettingsContainer","prop","onReset","setSelected","MyPattern","wrapper","canvas","drawImageSrc","loopX","loopY","drawBackgroundColor","save","rect","clip","Math","ceil","drawPatternVanila","drawPatternFlip","drawPatternLine","restore","beginPath","fillStyle","fillRect","closePath","i","flipType","flip","nonFlip","getXVanilla","y","x","j","drawnImg","scaleH","scaleV","getYFlip","getXFlip","flipFlag","key","posX","posY","scale","getXLine","parseInt","makePattern","cx","MyCanvas","drawnImgSrc","offsetX","offsetLeft","offsetY","offsetTop","points","isCropped","prototype","resizeCanvas","args","clear","clearRect","initImage","alpha","globalAlpha","ratio","newWidth","newHeight","getSizeToKeepImageScale","handleMouseDown","preventDefault","stopPropagation","clientX","clientY","documentElement","scrollTop","drawOutline","mx","my","crop","moveTo","lineTo","stroke","arc","PI","minX","offsetWidth","minY","offsetHeight","maxX","maxY","clippedWidth","clippedHeight","myPattern","setColor","setCanvasWidth","setCanvasHeight","setImgWidth","setImgHeight","setGap","setType","getPatternSrc","CanvasBlock","Canvas","setMyCanvas","canvasSize","setCanvasSize","wrapperRef","handleResize","window","mousedownRef","cropImgSrc","CanvasContainer","myCanvas","TabPanelContainer","tabCompObj","0","1","PatternsContainer","setActiveTab","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootSaga","all","rootReducer","combineReducers","GlobalStyle","createGlobalStyle","sagaMiddleware","createSagaMiddleware","createStore","composeWithDevTools","applyMiddleware","run","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f79c1469.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst MainWrapper = styled.main`\r\n  width: 100vw;\r\n  height: 100vh;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  position: fixed;\r\n  top: 0;\r\n  width: 100vw;\r\n  height: 31px;\r\n  h1 {\r\n    padding: 5px 5px 5px 10px;\r\n    background-color: var(--darkest-gray);\r\n    color: #fff;\r\n    font-family: 'Lobster', cursive;\r\n    font-size: 1.2rem;\r\n  }\r\n`;\r\n\r\nconst MainContents = styled.section`\r\n  display: flex;\r\n  height: 100vh;\r\n  background-color: var(--dark-gray);\r\n`;\r\n\r\nconst Main = ({ children }) => {\r\n  return (\r\n    <MainWrapper>\r\n      <Header>\r\n        <h1>Pictor</h1>\r\n      </Header>\r\n      <MainContents>{children}</MainContents>\r\n    </MainWrapper>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import { openDB } from 'idb';\r\n\r\nconst DB_NAME = 'Pictor';\r\nconst STORE_PICTURES = 'pictures';\r\n\r\nexport const initIdb = async () => {\r\n  const db = await openDB(DB_NAME, 1, {\r\n    upgrade(db) {\r\n      // create a store\r\n      const store = db.createObjectStore(STORE_PICTURES, {\r\n        keyPath: 'id',\r\n        autoIncrement: true,\r\n      });\r\n      // create an index\r\n      store.createIndex('type', 'type');\r\n    },\r\n  });\r\n\r\n  const result = await db.getAll(STORE_PICTURES);\r\n  db.close();\r\n  return result;\r\n};\r\n\r\nexport const addPicture = async payload => {\r\n  const db = await openDB(DB_NAME, 1);\r\n  const keyPath = await db.add(STORE_PICTURES, payload); // keyPath 반환\r\n  const result = await db.get(STORE_PICTURES, keyPath);\r\n  db.close();\r\n  return result;\r\n};\r\n\r\nexport const deletePicture = async payload => {\r\n  const db = await openDB(DB_NAME, 1);\r\n  const tx = db.transaction(STORE_PICTURES, 'readwrite');\r\n  const store = tx.store;\r\n  // transaction이 하나의 store만 포함한다면, tx.store가 해당 store를 참조\r\n  // 여러 개의 store를 포함한다면, tx.objectStore(storeName) 사용\r\n\r\n  let count = 0;\r\n  for (const id of payload) {\r\n    await store.delete(id);\r\n    count++;\r\n  }\r\n  await tx.done; // 삭제 작업 완료\r\n\r\n  let result = [];\r\n  if (count > 0) {\r\n    result = await db.getAll(STORE_PICTURES);\r\n  }\r\n  db.close();\r\n\r\n  return result;\r\n};\r\n","import { call, put } from 'redux-saga/effects';\r\nimport * as api from '../idb/pictures';\r\n\r\nexport function* getPicturesSaga() {\r\n  try {\r\n    const pictures = yield call(api.initIdb);\r\n    yield put({\r\n      type: 'GET_PICTURES_SUCCESS',\r\n      payload: pictures,\r\n    }); // 액션 디스패치\r\n  } catch (e) {\r\n    console.log('getPicturesSaga Error', e);\r\n  }\r\n}\r\n\r\nexport function* addPictureSaga(action) {\r\n  try {\r\n    // 자동 생성되는 pk값 얻을 수 있음\r\n    const result = yield call(api.addPicture, action.payload);\r\n    yield put({\r\n      type: 'ADD_PICTURE_SUCCESS',\r\n      payload: result,\r\n    });\r\n  } catch (e) {\r\n    console.log('addPictureSaga Error', e);\r\n  }\r\n}\r\n\r\nexport function* deletePictureSaga(action) {\r\n  try {\r\n    const result = yield call(api.deletePicture, action.payload);\r\n    yield put({\r\n      type: 'DELETE_PICTURE_SUCCESS',\r\n      payload: result,\r\n    });\r\n  } catch (e) {\r\n    console.log('deletePictureSaga Error', e);\r\n  }\r\n}\r\n","import { takeEvery } from 'redux-saga/effects';\r\nimport {\r\n  getPicturesSaga,\r\n  addPictureSaga,\r\n  deletePictureSaga,\r\n} from './pictures.saga';\r\n\r\nconst GET_PICTURES = 'GET_PICTURES';\r\nconst GET_PICTURES_SUCCESS = 'GET_PICTURES_SUCCESS';\r\n\r\nconst ADD_PICTURE = 'ADD_PICTURE';\r\nconst ADD_PICTURE_SUCCESS = 'ADD_PICTURE_SUCCESS';\r\n\r\nconst DELETE_PICTURE = 'DELETE_PICTURE';\r\nconst DELETE_PICTURE_SUCCESS = 'DELETE_PICTURE_SUCCESS';\r\n\r\nconst ADD_SELECTED_PICTURES = 'ADD_SELECTED_PICTURES';\r\nconst DELETE_SELECTED_PICTURES = 'DELETE_SELECTED_PICTURES';\r\nconst CLEAR_SELECTED_PICTURES = 'CLEAR_SELECTED_PICTURES';\r\n\r\nconst CHANGE_DRWAN_PICTURE = 'CHANGE_DRWAN_PICTURE';\r\nconst CHANGE_CANVAS_MODE = 'CHANGE_CANVAS_MODE';\r\nconst CHANGE_PROPERTIES = 'CHANGE_PROPERTIES';\r\n\r\nexport const getPictures = () => ({ type: GET_PICTURES });\r\n\r\nexport const addPicture = payload => ({ type: ADD_PICTURE, payload });\r\nexport const deletePicture = payload => ({ type: DELETE_PICTURE, payload });\r\n\r\nexport const addSelectedPictures = payload => ({\r\n  type: ADD_SELECTED_PICTURES,\r\n  payload,\r\n});\r\nexport const deleteSelectedPictures = payload => ({\r\n  type: DELETE_SELECTED_PICTURES,\r\n  payload,\r\n});\r\nexport const clearSelectedPictures = () => ({\r\n  type: CLEAR_SELECTED_PICTURES,\r\n});\r\n\r\nexport const changeDrawnPicture = payload => ({\r\n  type: CHANGE_DRWAN_PICTURE,\r\n  payload,\r\n});\r\nexport const changeCanvasMode = payload => ({\r\n  type: CHANGE_CANVAS_MODE,\r\n  payload,\r\n});\r\nexport const changeProperties = payload => ({\r\n  type: CHANGE_PROPERTIES,\r\n  payload,\r\n});\r\n\r\nexport function* pictureSaga() {\r\n  yield takeEvery(GET_PICTURES, getPicturesSaga);\r\n  yield takeEvery(ADD_PICTURE, addPictureSaga);\r\n  yield takeEvery(DELETE_PICTURE, deletePictureSaga);\r\n}\r\n\r\nexport const initialData = {\r\n  properties: {\r\n    color: '#ffffff',\r\n    canvasWidth: 0,\r\n    canvasHeight: 0,\r\n    imgWidth: 0,\r\n    imgHeight: 0,\r\n    gap: 50,\r\n    type: 'vanilla',\r\n  },\r\n};\r\n\r\nconst initialState = {\r\n  pictures: [],\r\n  selectedPictures: [], // 삭제\r\n  drawnPicture: null,\r\n  canvasMode: null,\r\n  properties: initialData.properties,\r\n};\r\n\r\nexport default function pictures(state = initialState, action) {\r\n  //console.log('reducer', action.type);\r\n  switch (action.type) {\r\n    case GET_PICTURES_SUCCESS:\r\n    case DELETE_PICTURE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        pictures: action.payload,\r\n      };\r\n    case ADD_PICTURE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        pictures: state.pictures.concat(action.payload),\r\n      };\r\n    case ADD_SELECTED_PICTURES:\r\n      return {\r\n        ...state,\r\n        selectedPictures: state.selectedPictures.concat(action.payload),\r\n      };\r\n    case DELETE_SELECTED_PICTURES:\r\n      return {\r\n        ...state,\r\n        selectedPictures: state.selectedPictures.filter(\r\n          item => item !== action.payload,\r\n        ),\r\n      };\r\n    case CLEAR_SELECTED_PICTURES:\r\n      return {\r\n        ...state,\r\n        selectedPictures: [],\r\n      };\r\n    case CHANGE_DRWAN_PICTURE:\r\n      return {\r\n        ...state,\r\n        drawnPicture: action.payload,\r\n      };\r\n    case CHANGE_CANVAS_MODE:\r\n      return {\r\n        ...state,\r\n        canvasMode: action.payload,\r\n      };\r\n    case CHANGE_PROPERTIES:\r\n      return {\r\n        ...state,\r\n        properties: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Ul = styled.ul`\r\n  display: flex;\r\n`;\r\n\r\nconst Li = styled.li`\r\n  width: fit-content;\r\n  padding: 5px;\r\n  &:not(:first-of-type) {\r\n    margin-left: -2px;\r\n  }\r\n  background-color: var(--middle-gray);\r\n  &:hover {\r\n    background-color: var(--border-light-gray);\r\n    transition: 0.2s;\r\n  }\r\n  border: 2px solid var(--border-dark-gray);\r\n  border-bottom: 0;\r\n  color: ${props => !props.isActive && `var(--darkest-gray)`};\r\n  font-size: 0.9rem;\r\n  font-weight: normal;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Tabs = React.memo(({ tabs, activeTab, handleTab }) => {\r\n  return (\r\n    <Ul>\r\n      {tabs.map((tab, index) => (\r\n        <TabItem key={index} tab={tab} id={index} activeTab={activeTab} handleTab={handleTab} />\r\n      ))}\r\n    </Ul>\r\n  );\r\n});\r\n\r\nconst TabItem = React.memo(({ handleTab, ...props }) => {\r\n  const { id, tab, activeTab } = props;\r\n  return (\r\n    <Li key={id} onClick={() => handleTab(id)} isActive={id === activeTab}>\r\n      {tab}\r\n    </Li>\r\n  );\r\n});\r\n\r\nexport default Tabs;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport Tabs from './Tabs';\r\n\r\nconst Wrapper = styled.div`\r\n  flex-basis: ${props => (props.target === 'SIDEBAR' ? '20vw' : '80vw')};\r\n  display: flex;\r\n  flex-direction: column;\r\n  min-width: 0;\r\n  padding: 5px;\r\n  padding-top: 36px;\r\n  &:last-of-type {\r\n    padding-left: 0;\r\n  }\r\n`;\r\n\r\nconst ContentWrapper = styled.div`\r\n  flex-grow: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background: var(--middle-gray);\r\n  border: 2px solid var(--border-dark-gray);\r\n`;\r\n\r\nconst TabPanel = ({ children, ...props }) => {\r\n  const { target, tabs, activeTab, handleTab } = props;\r\n  //console.log('TabPanel layout ', target, tabs);\r\n  return (\r\n    <Wrapper target={target}>\r\n      <Tabs tabs={tabs} activeTab={activeTab} handleTab={handleTab} />\r\n      <ContentWrapper>{children}</ContentWrapper>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default TabPanel;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: ${props => (props.flex ? props.flex : 'space-between')};\r\n  align-items: center;\r\n  padding: 5px;\r\n  border-bottom: 2px solid var(--border-light-gray);\r\n`;\r\n\r\nconst TopButtons = ({ flex, children }) => {\r\n  //console.log('TopButtons');\r\n  return <Wrapper flex={flex}>{children}</Wrapper>;\r\n};\r\n\r\nexport default TopButtons;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 5px;\r\n`;\r\n\r\nconst TopFilter = ({ children }) => {\r\n  //console.log('TopFilter');\r\n  return <Wrapper>{children}</Wrapper>;\r\n};\r\n\r\nexport default React.memo(TopFilter);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  flex: 1 0 50vh;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst Content = ({ children }) => {\r\n  return <Wrapper>{children}</Wrapper>;\r\n};\r\n\r\nexport default Content;\r\n","import * as React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Block = styled.svg`\r\n  margin: ${props => props.margin};\r\n`;\r\n\r\nconst SVG = ({ path, ...props }) => {\r\n  return (\r\n    <Block xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" {...props}>\r\n      <path d={path} fillRule=\"evenodd\" clipRule=\"evenodd\" />\r\n    </Block>\r\n  );\r\n};\r\n\r\nexport default React.memo(SVG);\r\n","import React, { useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addPicture } from '../../redux/pictures';\r\nimport styled from 'styled-components';\r\n\r\nimport SVG from './SVG';\r\n\r\nconst FileInput = styled.input.attrs(props => ({\r\n  type: 'file',\r\n}))`\r\n  position: absolute;\r\n  overflow: hidden;\r\n  width: 1px;\r\n  height: 1px;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  padding: 5px;\r\n  margin-right: 3px;\r\n  &:hover {\r\n    background-color: var(--dark-gray);\r\n    transition: 0.2s ease-in-out;\r\n  }\r\n  cursor: pointer;\r\n  svg {\r\n    fill: var(--lightest-gray);\r\n  }\r\n`;\r\n\r\nconst FileUploader = () => {\r\n  //console.log('FileUploader');\r\n  const { canvasMode } = useSelector(state => state.pictures);\r\n  const type = canvasMode === 'pattern' ? 'crop' : 'origin';\r\n  const fileRef = useRef();\r\n  const dispatch = useDispatch();\r\n\r\n  const resizeImgae = (width, height) => {\r\n    // 이미지 리사이즈\r\n    const MAX_WIDTH = 300;\r\n    const MAX_HEIGHT = 300;\r\n    if (width <= MAX_WIDTH && height <= MAX_HEIGHT) {\r\n      return { width, height };\r\n    }\r\n\r\n    if (width > height) {\r\n      // landscape\r\n      if (width > MAX_WIDTH) {\r\n        height *= MAX_WIDTH / width;\r\n        width = MAX_WIDTH;\r\n      }\r\n    } else {\r\n      // portrait\r\n      if (height > MAX_HEIGHT) {\r\n        width *= MAX_HEIGHT / height;\r\n        height = MAX_HEIGHT;\r\n      }\r\n    }\r\n    return { width, height };\r\n  };\r\n\r\n  const getResizedSrc = (img, w, h) => {\r\n    const c = document.createElement('canvas');\r\n    const ctx = c.getContext('2d');\r\n    c.width = w;\r\n    c.height = h;\r\n    ctx.drawImage(img, 0, 0, w, h);\r\n    return c.toDataURL('image/png', 1);\r\n  };\r\n\r\n  const handelFile = e => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(e.target.files[0]);\r\n    reader.addEventListener('load', () => {\r\n      let src = reader.result;\r\n      if (canvasMode !== 'pattern') {\r\n        dispatch(addPicture({ type, src })); // indexedDB에 저장\r\n        return;\r\n      }\r\n\r\n      // 크롭 사이즈로 src 재생성 후 저장\r\n      const img = new Image();\r\n      img.onload = function () {\r\n        const { width, height } = resizeImgae(img.width, img.height);\r\n        src = getResizedSrc(this, width, height);\r\n        dispatch(addPicture({ type, src }));\r\n      };\r\n      img.src = src;\r\n    });\r\n    //fileRef.current.value = '';\r\n  };\r\n\r\n  return (\r\n    <Label htmlFor=\"file\" aria-label=\"업로드\">\r\n      <FileInput type=\"file\" id=\"file\" name=\"file\" onChange={handelFile} ref={fileRef} />\r\n      <SVG\r\n        width=\"15\"\r\n        height=\"15\"\r\n        path=\"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm6 13h-5v5h-2v-5h-5v-2h5v-5h2v5h5v2z\"\r\n      />\r\n    </Label>\r\n  );\r\n};\r\n\r\nexport default React.memo(FileUploader);\r\n","import React, { useEffect, useRef, useMemo } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nconst Ul = styled.ul`\r\n  overflow-y: auto;\r\n  flex: 1 0 500px;\r\n  width: 100%;\r\n  padding: 10px;\r\n`;\r\nconst Li = styled.li`\r\n  position: relative;\r\n  &:not(:last-of-type) {\r\n    margin-bottom: 5px;\r\n  }\r\n  border: ${props => (props.isSelected ? '3px solid #fff' : 0)};\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  width: 100%;\r\n  height: 130px;\r\n  object-fit: contain;\r\n`;\r\n\r\nconst SelectBlock = styled.div`\r\n  position: absolute;\r\n  visibility: ${props => (props.isSelected ? 'visible' : 'hidden')};\r\n  width: 100%;\r\n  height: fit-content;\r\n  background: rgba(0, 0, 0, 0.4);\r\n`;\r\n\r\nconst filterListByType = (pictures, type) => {\r\n  if (!pictures || !pictures.length) {\r\n    return pictures;\r\n  }\r\n\r\n  let result;\r\n  if (type === 'all') {\r\n    result = pictures;\r\n  } else {\r\n    result = pictures.filter(pic => pic.type === type);\r\n  }\r\n  return result;\r\n};\r\n\r\nconst Images = React.memo(({ selectedType, selectedList, onToggle }) => {\r\n  //console.log('Images', selectedType, selectedList);\r\n\r\n  const { pictures } = useSelector(state => state.pictures);\r\n\r\n  // 렌더링될 이미지 필터링\r\n  let filteredImages = useMemo(() => filterListByType(pictures, selectedType), [\r\n    pictures,\r\n    selectedType,\r\n  ]);\r\n\r\n  // 선택여부 속성 추가\r\n  const bool = filteredImages && filteredImages.length;\r\n  if (bool) {\r\n    filteredImages = filteredImages.map(img => {\r\n      const check = selectedList.includes(img.id);\r\n      return check ? { ...img, isSelected: true } : { ...img, isSelected: false };\r\n    });\r\n  }\r\n  //console.log('ImageList', selectedType, pictures, filteredImages);\r\n\r\n  return (\r\n    <Ul>\r\n      {bool\r\n        ? filteredImages.map(img => <ImageItem key={img.id} img={img} onToggle={onToggle} />)\r\n        : null}\r\n    </Ul>\r\n  );\r\n});\r\n\r\nconst ImageItem = React.memo(({ img, onToggle }) => {\r\n  const { id, isSelected, src } = img;\r\n  //console.log('ImageItem');\r\n\r\n  return (\r\n    <Li isSelected={isSelected} onClick={() => onToggle(id)}>\r\n      <SelectBlock isSelected={isSelected} />\r\n      <Img alt=\"uploaded image\" src={src} />\r\n    </Li>\r\n  );\r\n});\r\n\r\nexport default Images;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.button`\r\n  margin: ${props => props.margin};\r\n  padding: ${props => props.padding};\r\n  background-color: var(--middle-gray);\r\n  color: var(--lightest-gray);\r\n  &:hover {\r\n    background-color: var(--dark-gray);\r\n    transition: 0.2s ease-in-out;\r\n  }\r\n  svg {\r\n    fill: var(--lightest-gray);\r\n  }\r\n`;\r\n\r\nconst Button = ({ children, onClick, ...props }) => {\r\n  return (\r\n    <Wrapper {...props} onClick={onClick}>\r\n      {children}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default React.memo(Button);\r\n","import React, { useRef, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst SelectBlock = styled.select`\r\n  min-width: 90%;\r\n  padding: 3px;\r\n  background: var(--darkest-gray);\r\n  border: 2px solid var(--border-dark-gray);\r\n  color: var(--lightest-gray);\r\n`;\r\nconst Option = styled.option`\r\n  color: var(--lightest-gray);\r\n`;\r\n\r\nconst Select = ({ data, onChange }) => {\r\n  const selectRef = useRef();\r\n  const handleFocus = () => {\r\n    selectRef.current.size = 5;\r\n  };\r\n  const handleBlur = () => {\r\n    selectRef.current.size = 1;\r\n  };\r\n  const handleChange = () => {\r\n    selectRef.current.blur();\r\n  };\r\n  useEffect(() => {\r\n    const select = selectRef.current;\r\n    if (select && data.length > 5) {\r\n      select.addEventListener('focus', handleFocus);\r\n      select.addEventListener('blur', handleBlur);\r\n      select.addEventListener('change', handleChange);\r\n    }\r\n    return () => {\r\n      select.removeEventListener('focus', handleFocus);\r\n      select.removeEventListener('blur', handleBlur);\r\n      select.removeEventListener('change', handleChange);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <SelectBlock name=\"type\" onChange={onChange} ref={selectRef}>\r\n      {data &&\r\n        data.map(d => (\r\n          <Option key={d.type} value={d.type}>\r\n            {d.optionName}\r\n          </Option>\r\n        ))}\r\n    </SelectBlock>\r\n  );\r\n};\r\n\r\nexport default Select;\r\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  getPictures,\r\n  deletePicture,\r\n  addSelectedPictures,\r\n  deleteSelectedPictures,\r\n  clearSelectedPictures,\r\n  changeDrawnPicture,\r\n  changeCanvasMode,\r\n} from '../../redux/pictures';\r\nimport styled from 'styled-components';\r\n\r\nimport TopButtons from '../layout/tabPanel/TopButtons';\r\nimport TopFilter from '../layout/tabPanel/TopFilter';\r\nimport Content from '../layout/tabPanel/Content';\r\nimport FileUploader from '../common/FileUploader';\r\nimport Images from '../parts/Images';\r\nimport Button from '../common/Button';\r\nimport SVG from '../common/SVG';\r\nimport Select from '../common/Select';\r\n\r\nconst ButtonInner = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst addTypeList = (pictures, typeList) => {\r\n  if (!pictures || !pictures.length) {\r\n    return typeList;\r\n  }\r\n\r\n  for (let pic of pictures) {\r\n    // type: origin, crop, pattern\r\n    let optionName = '';\r\n    if (pic.type === 'crop') optionName = '크롭';\r\n    else if (pic.type === 'pattern') optionName = '패턴';\r\n    else optionName = '원본';\r\n\r\n    if (!typeList.find(t => t.type === pic.type)) {\r\n      typeList.push({ type: pic.type, optionName });\r\n    }\r\n  }\r\n  return typeList;\r\n};\r\n\r\nconst ImagesContainer = () => {\r\n  //console.log('ImagesContainer');\r\n  const dispatch = useDispatch();\r\n  const { pictures, drawnPicture } = useSelector(state => state.pictures);\r\n\r\n  // 이미지 type으로 필터링하기 위한 배열\r\n  let typeList = [\r\n    {\r\n      type: 'all',\r\n      optionName: '전체',\r\n    },\r\n  ];\r\n  // pictures가 바뀌었을 때만 실행\r\n  typeList = useMemo(() => addTypeList(pictures, typeList), [pictures]);\r\n\r\n  // 첫 마운트 후 indexedDB 값 리덕스 스토어에 셋팅\r\n  useEffect(() => {\r\n    if (!pictures || !pictures.length) {\r\n      dispatch(getPictures());\r\n    }\r\n  }, []);\r\n\r\n  // 필터링 type 값 관리\r\n  const [selectedType, setSelectedType] = useState(typeList[0].type);\r\n  const onChange = e => setSelectedType(e.target.value);\r\n\r\n  // 선택 이미지 리스트(삭제용) 관리\r\n  const [selectedList, setSelectedList] = useState([]);\r\n  const onToggle = useCallback(\r\n    id => {\r\n      if (selectedList.includes(id)) {\r\n        setSelectedList(selectedList.filter(item => item !== id));\r\n        dispatch(deleteSelectedPictures(id));\r\n      } else {\r\n        setSelectedList(selectedList.concat(id));\r\n        dispatch(addSelectedPictures(id));\r\n      }\r\n    },\r\n    [selectedList, dispatch],\r\n  );\r\n\r\n  const onReset = () => setSelectedList([]);\r\n\r\n  const onDelete = () => {\r\n    if (!selectedList.length) {\r\n      alert('⚠ 이미지를 선택해주세요 ⚠');\r\n      return;\r\n    }\r\n\r\n    dispatch(deletePicture(selectedList));\r\n    dispatch(clearSelectedPictures());\r\n\r\n    // 캔버스에서도 삭제\r\n    if (selectedList.includes(drawnPicture)) {\r\n      dispatch(changeDrawnPicture(null));\r\n      dispatch(changeCanvasMode('clear'));\r\n    }\r\n    setSelectedList([]);\r\n  };\r\n\r\n  const onDownload = () => {\r\n    if (!selectedList.length) {\r\n      alert('⚠ 이미지를 선택해주세요 ⚠');\r\n      return;\r\n    }\r\n    if (selectedList.length > 1) {\r\n      alert('⚠ 한번에 하나의 이미지만 다운로드할 수 있습니다 ⚠');\r\n      return;\r\n    }\r\n\r\n    const link = document.createElement('a');\r\n    link.href = pictures.find(p => p.id === selectedList[0]).src;\r\n    link.download = 'awesome pictor.jpg';\r\n    link.click();\r\n  };\r\n\r\n  const onCrop = () => {\r\n    if (!selectedList.length) {\r\n      alert('⚠ 이미지를 선택해주세요 ⚠');\r\n      return;\r\n    }\r\n    if (selectedList.length > 1) {\r\n      alert('⚠ 한번에 하나의 이미지만 크롭할 수 있습니다 ⚠');\r\n      return;\r\n    }\r\n    dispatch(changeDrawnPicture(selectedList[0]));\r\n    dispatch(changeCanvasMode('crop'));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TopButtons>\r\n        <ButtonInner>\r\n          <FileUploader />\r\n          <Button padding=\"5px\" margin=\"0 5px 0 0\" onClick={onDownload} aria-label=\"다운로드\">\r\n            <SVG width=\"15\" height=\"15\" path=\"M16 11h5l-9 10-9-10h5v-11h8v11zm1 11h-10v2h10v-2z\" />\r\n          </Button>\r\n          <Button padding=\"5px\" margin=\"0 5px 0 0\" onClick={onDelete} aria-label=\"삭제\">\r\n            <SVG\r\n              width=\"15\"\r\n              height=\"15\"\r\n              path=\"M9 19c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm4 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm4 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 1v10zm5-17v2h-20v-2h5.711c.9 0 1.631-1.099 1.631-2h5.315c0 .901.73 2 1.631 2h5.712zm-3 4v16h-14v-16h-2v18h18v-18h-2z\"\r\n            />\r\n          </Button>\r\n        </ButtonInner>\r\n        <ButtonInner>\r\n          <Button padding=\"5px\" margin=\"0 5px 0 0\" onClick={onReset} aria-label=\"선택 초기화\">\r\n            <SVG\r\n              width=\"15\"\r\n              height=\"15\"\r\n              path=\"M18.885 3.515c-4.617-4.618-12.056-4.676-16.756-.195l-2.129-2.258v7.938h7.484l-2.066-2.191c2.82-2.706 7.297-2.676 10.073.1 4.341 4.341 1.737 12.291-5.491 12.291v4.8c3.708 0 6.614-1.244 8.885-3.515 4.686-4.686 4.686-12.284 0-16.97z\"\r\n            />\r\n          </Button>\r\n          <Button padding=\"5px\" margin=\"0 5px 0 0\" onClick={onCrop} aria-label=\"자르기\">\r\n            <SVG\r\n              width=\"15\"\r\n              height=\"15\"\r\n              path=\"M24 18h-4v-14h-14v-4h-2v4h-4v2h4v14h14v4h2v-4h4v-2zm-18 0v-12h12v12h-12z\"\r\n            />\r\n          </Button>\r\n        </ButtonInner>\r\n      </TopButtons>\r\n      <TopFilter>\r\n        <Select data={typeList} onChange={onChange} />\r\n      </TopFilter>\r\n      <Content>\r\n        <Images selectedType={selectedType} selectedList={selectedList} onToggle={onToggle} />\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(ImagesContainer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  margin: 5px;\r\n`;\r\n\r\nconst ToggleWrapper = ({ children }) => {\r\n  return <Wrapper>{children}</Wrapper>;\r\n};\r\n\r\nexport default ToggleWrapper;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport SVG from '../../common/SVG';\r\n\r\nconst Wrapper = styled.button`\r\n  justify-content: flex-start;\r\n  width: 100%;\r\n  padding: 5px;\r\n  margin-bottom: 5px;\r\n  background-color: ${props => (props.selected ? 'var(--dark-gray)' : 'var(--middle-gray)')};\r\n  &:hover {\r\n    background-color: var(--dark-gray);\r\n    transition: 0.2s;\r\n  }\r\n  color: var(--lightest-gray);\r\n  font-size: 0.8rem;\r\n  svg {\r\n    margin-right: 3px;\r\n    fill: var(--lightest-gray);\r\n  }\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ToggleTitle = ({ selected, type, handleSelected, children }) => {\r\n  const isSelected = selected === type;\r\n  return (\r\n    <Wrapper selected={isSelected} onClick={() => handleSelected(type)}>\r\n      {isSelected ? (\r\n        <SVG width=\"10\" height=\"10\" path=\"M12 21l-12-18h24z\" />\r\n      ) : (\r\n        <SVG width=\"10\" height=\"10\" path=\"M24 22h-24l12-20z\" />\r\n      )}\r\n      {children}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default ToggleTitle;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  display: ${props => (props.selected ? 'flex' : 'none')};\r\n  ${props =>\r\n    props.column &&\r\n    css`\r\n      flex-direction: column;\r\n    `}\r\n  align-items: center;\r\n  padding: 5px;\r\n`;\r\n\r\nconst ToggleContent = ({ children, ...props }) => {\r\n  return <Wrapper {...props}>{children}</Wrapper>;\r\n};\r\n\r\nexport default ToggleContent;\r\n","import React, { useState, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeDrawnPicture } from '../../../redux/pictures';\r\n\r\nimport Images from '../../parts/Images';\r\nimport ToggleWrapper from '../../layout/pattern/ToggleWrapper';\r\nimport ToggleTitle from '../../layout/pattern/ToggleTitle';\r\nimport ToggleContent from '../../layout/pattern/ToggleContent';\r\n\r\nconst SetImage = ({ selected, handleSelected }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  // 선택 크롭 이미지 관리\r\n  const [selectedCrop, setSelectedCrop] = useState([]);\r\n  const onToggle = useCallback(\r\n    id => {\r\n      if (!selectedCrop.includes(id)) {\r\n        setSelectedCrop([id]);\r\n        dispatch(changeDrawnPicture(id));\r\n      }\r\n    },\r\n    [selectedCrop, dispatch],\r\n  );\r\n\r\n  return (\r\n    <ToggleWrapper>\r\n      <ToggleTitle selected={selected} type=\"img\" handleSelected={handleSelected}>\r\n        Select Image\r\n      </ToggleTitle>\r\n      <ToggleContent selected={selected === 'img'} column>\r\n        <Images selectedType=\"crop\" selectedList={selectedCrop} onToggle={onToggle} />\r\n      </ToggleContent>\r\n    </ToggleWrapper>\r\n  );\r\n};\r\n\r\nexport default SetImage;\r\n","import React, { useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { debounce } from 'lodash';\r\n\r\nconst Block = styled.input.attrs(props => ({\r\n  type: props.type,\r\n}))`\r\n  width: 40px;\r\n  height: 30px;\r\n`;\r\n\r\nconst Input = ({ onChange, ...props }) => {\r\n  const { setProperties } = props;\r\n  // useState의 경우 매번 컴포넌트가 리렌더되서, 디바운스 적용 안됨\r\n  const color = useRef(props.value);\r\n\r\n  const debounceChange = debounce(() => {\r\n    setProperties(properties => ({\r\n      ...properties,\r\n      color: color.current,\r\n    }));\r\n  }, 100);\r\n\r\n  const handleChange = e => {\r\n    color.current = e.target.value;\r\n    debounceChange();\r\n  };\r\n\r\n  return <Block type=\"color\" {...props} onChange={handleChange} />;\r\n};\r\n\r\nexport default React.memo(Input);\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport Color from '../../common/Color';\r\nimport ToggleWrapper from '../../layout/pattern/ToggleWrapper';\r\nimport ToggleTitle from '../../layout/pattern/ToggleTitle';\r\nimport ToggleContent from '../../layout/pattern/ToggleContent';\r\n\r\nconst ColorCode = styled.div`\r\n  margin-left: 5px;\r\n  color: ${props => props.color};\r\n  font-size: 0.8rem;\r\n`;\r\n\r\nconst SetColor = ({ ...props }) => {\r\n  const { selected, handleSelected, onChange, setProperties } = props;\r\n  const { color } = useSelector(state => state.pictures.properties);\r\n\r\n  return (\r\n    <ToggleWrapper>\r\n      <ToggleTitle selected={selected} type=\"color\" handleSelected={handleSelected}>\r\n        Background Color\r\n      </ToggleTitle>\r\n      <ToggleContent selected={selected === 'color'}>\r\n        <Color name=\"color\" value={color} onChange={onChange} setProperties={setProperties} />\r\n        <ColorCode color={color}>{color}</ColorCode>\r\n      </ToggleContent>\r\n    </ToggleWrapper>\r\n  );\r\n};\r\n\r\nexport default SetColor;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst RangeInput = styled.input.attrs(props => ({\r\n  type: props.type,\r\n}))`\r\n  width: 100%;\r\n  padding: 3px;\r\n  background: transparent;\r\n  -webkit-appearance: none;\r\n  &::-webkit-slider-thumb {\r\n    -webkit-appearance: none;\r\n    width: 13px;\r\n    height: 18px;\r\n    margin-top: -5px;\r\n    background: var(--middle-gray);\r\n    border: 2px solid var(--dark-gray);\r\n    border-radius: 3px;\r\n    cursor: pointer;\r\n    &:hover {\r\n      background: var(--dark-gray);\r\n      border: 0;\r\n    }\r\n  }\r\n  &::-webkit-slider-runnable-track {\r\n    height: 8px;\r\n    background: var(--border-light-gray);\r\n  }\r\n`;\r\n\r\nconst Range = ({ onChange, ...props }) => {\r\n  return <RangeInput type=\"range\" {...props} onChange={onChange} />;\r\n};\r\n\r\nexport default React.memo(Range);\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { isEqual } from 'lodash';\r\nimport { initialData } from '../../../redux/pictures';\r\n\r\nimport Range from '../../common/Range';\r\nimport ToggleWrapper from '../../layout/pattern/ToggleWrapper';\r\nimport ToggleTitle from '../../layout/pattern/ToggleTitle';\r\nimport ToggleContent from '../../layout/pattern/ToggleContent';\r\n\r\nconst Inner = styled.div`\r\n  display: flex;\r\n  &:first-of-type {\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nconst Block = styled.div`\r\n  flex-basis: 20%;\r\n`;\r\n\r\nconst SetCVSize = ({ ...props }) => {\r\n  const { selected, handleSelected, setProperties } = props;\r\n\r\n  const defaultProps = initialData.properties;\r\n  const { properties } = useSelector(state => state.pictures);\r\n  const { canvasWidth, canvasHeight } = properties;\r\n\r\n  const nodes = document.querySelectorAll('canvas');\r\n  const canvasRef = useRef(nodes.length > 1 ? nodes[1] : nodes[0]);\r\n  const [userSize, setUserSize] = useState({\r\n    width: canvasWidth ? canvasWidth : canvasRef.current.width,\r\n    height: canvasHeight ? canvasHeight : canvasRef.current.height,\r\n  });\r\n\r\n  const onChange = e => {\r\n    let { name, value } = e.target;\r\n    setUserSize({ ...userSize, [name]: value });\r\n  };\r\n\r\n  //console.log('SetCVSize', canvasWidth, canvasHeight, userSize);\r\n\r\n  useEffect(() => {\r\n    // 설정이 리셋됐을 때\r\n    if (isEqual(properties, defaultProps)) {\r\n      setUserSize({ width: canvasRef.current.width, height: canvasRef.current.height });\r\n    }\r\n  }, [canvasWidth, canvasHeight]);\r\n\r\n  useEffect(() => {\r\n    setProperties(properties => ({\r\n      ...properties,\r\n      canvasWidth: userSize.width,\r\n      canvasHeight: userSize.height,\r\n    }));\r\n  }, [userSize]);\r\n\r\n  return (\r\n    <ToggleWrapper>\r\n      <ToggleTitle selected={selected} type=\"canvasSize\" handleSelected={handleSelected}>\r\n        Background Size\r\n      </ToggleTitle>\r\n      <ToggleContent selected={selected === 'canvasSize'} column>\r\n        <Inner>\r\n          <Block>W:</Block>\r\n          <Range\r\n            name=\"width\"\r\n            value={userSize.width}\r\n            onChange={onChange}\r\n            min=\"100\"\r\n            max=\"1920\"\r\n            step=\"30\"\r\n          />\r\n        </Inner>\r\n        <Inner>\r\n          <Block>H:</Block>\r\n          <Range\r\n            name=\"height\"\r\n            value={userSize.height}\r\n            onChange={onChange}\r\n            min=\"100\"\r\n            max=\"1080\"\r\n            step=\"30\"\r\n          />\r\n        </Inner>\r\n      </ToggleContent>\r\n    </ToggleWrapper>\r\n  );\r\n};\r\n\r\nexport default SetCVSize;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport Range from '../../common/Range';\r\nimport ToggleWrapper from '../../layout/pattern/ToggleWrapper';\r\nimport ToggleTitle from '../../layout/pattern/ToggleTitle';\r\nimport ToggleContent from '../../layout/pattern/ToggleContent';\r\n\r\nconst Inner = styled.div`\r\n  display: flex;\r\n  &:first-of-type {\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nconst Block = styled.div`\r\n  flex-basis: 20%;\r\n`;\r\n\r\nconst SetImgSize = ({ ...props }) => {\r\n  const { selected, handleSelected, onChange } = props;\r\n  const { pictures, drawnPicture, properties } = useSelector(state => state.pictures);\r\n  const { imgWidth: width, imgHeight: height } = properties;\r\n\r\n  const img = new Image();\r\n  if (drawnPicture) {\r\n    img.src = pictures.find(p => p.id === drawnPicture).src;\r\n  }\r\n\r\n  //console.log('SetImgSize', img.width, img.height, width, height);\r\n\r\n  return (\r\n    <ToggleWrapper>\r\n      <ToggleTitle selected={selected} type=\"imgSize\" handleSelected={handleSelected}>\r\n        Cropped Image Size\r\n      </ToggleTitle>\r\n      <ToggleContent selected={selected === 'imgSize'} column>\r\n        <Inner>\r\n          <Block>W:</Block>\r\n          <Range\r\n            name=\"imgWidth\"\r\n            value={width ? width : img.width}\r\n            min=\"30\"\r\n            max=\"300\"\r\n            step=\"10\"\r\n            onChange={onChange}\r\n          />\r\n        </Inner>\r\n        <Inner>\r\n          <Block>H:</Block>\r\n          <Range\r\n            name=\"imgHeight\"\r\n            value={height ? height : img.height}\r\n            min=\"30\"\r\n            max=\"300\"\r\n            step=\"10\"\r\n            onChange={onChange}\r\n          />\r\n        </Inner>\r\n      </ToggleContent>\r\n    </ToggleWrapper>\r\n  );\r\n};\r\n\r\nexport default SetImgSize;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport Range from '../../common/Range';\r\nimport ToggleWrapper from '../../layout/pattern/ToggleWrapper';\r\nimport ToggleTitle from '../../layout/pattern/ToggleTitle';\r\nimport ToggleContent from '../../layout/pattern/ToggleContent';\r\n\r\nconst SetGapSize = ({ ...props }) => {\r\n  const { selected, handleSelected, onChange } = props;\r\n  const { gap } = useSelector(state => state.pictures.properties);\r\n\r\n  return (\r\n    <ToggleWrapper>\r\n      <ToggleTitle selected={selected} type=\"gap\" handleSelected={handleSelected}>\r\n        Gap Size\r\n      </ToggleTitle>\r\n      <ToggleContent selected={selected === 'gap'}>\r\n        <Range name=\"gap\" value={gap} min=\"5\" max=\"100\" onChange={onChange} />\r\n      </ToggleContent>\r\n    </ToggleWrapper>\r\n  );\r\n};\r\n\r\nexport default SetGapSize;\r\n","import React from 'react';\r\nimport Select from '../../common/Select';\r\nimport ToggleWrapper from '../../layout/pattern/ToggleWrapper';\r\nimport ToggleTitle from '../../layout/pattern/ToggleTitle';\r\nimport ToggleContent from '../../layout/pattern/ToggleContent';\r\n\r\nconst SetType = ({ ...props }) => {\r\n  const { selected, handleSelected, onChange } = props;\r\n  const typeList = [\r\n    {\r\n      type: 'vanilla',\r\n      optionName: 'vanilla',\r\n    },\r\n    {\r\n      type: 'fold',\r\n      optionName: 'fold',\r\n    },\r\n    {\r\n      type: 'flip',\r\n      optionName: 'flip',\r\n    },\r\n    {\r\n      type: 'linefold',\r\n      optionName: 'linefold',\r\n    },\r\n    {\r\n      type: 'lineflip',\r\n      optionName: 'lineflip',\r\n    },\r\n    {\r\n      type: 'vanilla-zigzag',\r\n      optionName: 'vanilla-zigzag',\r\n    },\r\n    {\r\n      type: 'fold-zigzag',\r\n      optionName: 'fold-zigzag',\r\n    },\r\n    {\r\n      type: 'flip-zigzag',\r\n      optionName: 'flip-zigzag',\r\n    },\r\n    {\r\n      type: 'linefold-zigzag',\r\n      optionName: 'linefold-zigzag',\r\n    },\r\n    {\r\n      type: 'lineflip-zigzag',\r\n      optionName: 'lineflip-zigzag',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <ToggleWrapper>\r\n      <ToggleTitle selected={selected} type=\"patternType\" handleSelected={handleSelected}>\r\n        Select Pattern Type\r\n      </ToggleTitle>\r\n      <ToggleContent selected={selected === 'patternType'}>\r\n        <Select data={typeList} onChange={onChange} />\r\n      </ToggleContent>\r\n    </ToggleWrapper>\r\n  );\r\n};\r\n\r\nexport default SetType;\r\n","import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { changeProperties, initialData } from '../../redux/pictures';\r\n\r\nimport SVG from '../common/SVG';\r\nimport Button from '../common/Button';\r\nimport TopButtons from '../layout/tabPanel/TopButtons';\r\nimport Content from '../layout/tabPanel/Content';\r\n\r\nimport SetImage from '../parts/pattern/SetImage';\r\nimport SetColor from '../parts/pattern/SetColor';\r\nimport SetCVSize from '../parts/pattern/SetCVSize';\r\nimport SetImgSize from '../parts/pattern/SetImgSize';\r\nimport SetGapSize from '../parts/pattern/SetGapSize';\r\nimport SetType from '../parts/pattern/SetType';\r\nimport FileUploader from '../common/FileUploader';\r\n\r\nconst ButtonInner = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst SettingsContainer = () => {\r\n  const dispatch = useDispatch();\r\n  const { properties: prop } = useSelector(state => state.pictures);\r\n\r\n  // 속성 설정\r\n  const defaultProps = initialData.properties;\r\n  const [properties, setProperties] = useState(prop);\r\n  //console.log('SettingsContainer', defaultProps, properties);\r\n\r\n  const onChange = useCallback(e => {\r\n    const { name, value } = e.target;\r\n    setProperties(properties => ({\r\n      ...properties,\r\n      [name]: value,\r\n    }));\r\n  }, []);\r\n  const onReset = useCallback(() => setProperties(defaultProps), []);\r\n\r\n  // 설정값 변경되면 패턴 다시 그림\r\n  useEffect(() => {\r\n    dispatch(changeProperties(properties));\r\n  }, [properties, dispatch]);\r\n\r\n  // 설정영역 토글: color, canvasSize, img, imgSize, gap, patternType\r\n  const [selected, setSelected] = useState('color');\r\n  const handleSelected = useCallback(\r\n    prop => {\r\n      if (selected === prop) {\r\n        setSelected(null);\r\n      } else {\r\n        setSelected(prop);\r\n      }\r\n    },\r\n    [selected],\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <TopButtons>\r\n        <ButtonInner>\r\n          <FileUploader />\r\n        </ButtonInner>\r\n        <ButtonInner>\r\n          <Button padding=\"5px\" margin=\"0 5px 0 0\" onClick={onReset} aria-label=\"설정 초기화\">\r\n            <SVG\r\n              width=\"15\"\r\n              height=\"15\"\r\n              path=\"M18.885 3.515c-4.617-4.618-12.056-4.676-16.756-.195l-2.129-2.258v7.938h7.484l-2.066-2.191c2.82-2.706 7.297-2.676 10.073.1 4.341 4.341 1.737 12.291-5.491 12.291v4.8c3.708 0 6.614-1.244 8.885-3.515 4.686-4.686 4.686-12.284 0-16.97z\"\r\n            />\r\n          </Button>\r\n        </ButtonInner>\r\n      </TopButtons>\r\n      <Content>\r\n        <SetColor\r\n          selected={selected}\r\n          handleSelected={handleSelected}\r\n          setProperties={setProperties}\r\n          onChange={onChange}\r\n        />\r\n        <SetCVSize\r\n          selected={selected}\r\n          handleSelected={handleSelected}\r\n          setProperties={setProperties}\r\n        />\r\n        <SetImage selected={selected} handleSelected={handleSelected} />\r\n        <SetImgSize selected={selected} handleSelected={handleSelected} onChange={onChange} />\r\n        <SetGapSize selected={selected} handleSelected={handleSelected} onChange={onChange} />\r\n        <SetType selected={selected} handleSelected={handleSelected} onChange={onChange} />\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(SettingsContainer);\r\n","import { MyCanvas } from './myCanvas';\r\n\r\nexport class MyPattern extends MyCanvas {\r\n  constructor(wrapper, canvas, ctx, drawImageSrc) {\r\n    super(wrapper, canvas, ctx, drawImageSrc);\r\n  }\r\n\r\n  color = null;\r\n  canvasWidth = null;\r\n  canvasHeight = null;\r\n  imgWidth = null;\r\n  imgHeight = null;\r\n  gap = null;\r\n  type = null;\r\n  loopX = null;\r\n  loopY = null;\r\n\r\n  set setColor(value) {\r\n    this.color = value;\r\n  }\r\n  set setCanvasWidth(value) {\r\n    this.canvasWidth = parseInt(value ? value : this.canvas.width, 10);\r\n  }\r\n  set setCanvasHeight(value) {\r\n    this.canvasHeight = parseInt(value ? value : this.canvas.height, 10);\r\n  }\r\n  set setImgWidth(value) {\r\n    this.imgWidth = parseInt(value ? value : this.drawnImg.width, 10);\r\n  }\r\n  set setImgHeight(value) {\r\n    this.imgHeight = parseInt(value ? value : this.drawnImg.height, 10);\r\n  }\r\n  set setGap(value) {\r\n    this.gap = parseInt(value, 10);\r\n  }\r\n  set setType(value) {\r\n    this.type = value;\r\n  }\r\n\r\n  // src 리턴\r\n  get getPatternSrc() {\r\n    this.makePattern();\r\n\r\n    // 캔버스 생성\r\n    const c = document.createElement('canvas');\r\n    const cx = c.getContext('2d');\r\n    // 패턴 사이즈에 맞추기\r\n    c.width = this.canvasWidth;\r\n    c.height = this.canvasHeight;\r\n    cx.drawImage(\r\n      this.canvas,\r\n      0,\r\n      0,\r\n      this.canvasWidth,\r\n      this.canvasHeight,\r\n      0,\r\n      0,\r\n      this.canvasWidth,\r\n      this.canvasHeight,\r\n    );\r\n    return c.toDataURL('image/jpeg', 1);\r\n  }\r\n\r\n  makePattern() {\r\n    this.drawBackgroundColor(); // 배경색 그리기\r\n\r\n    // 설정한 캔버스 사이즈만큼 context 크기 잘라두고 그 안에서 패턴 뿌림\r\n    this.ctx.save();\r\n    this.ctx.rect(0, 0, this.canvasWidth, this.canvasHeight);\r\n    this.ctx.clip();\r\n\r\n    // 이미지 그리기\r\n    this.loopX = Math.ceil(this.canvasWidth / (this.gap + this.imgWidth));\r\n    this.loopY = Math.ceil(this.canvasHeight / (this.gap + this.imgHeight));\r\n\r\n    switch (this.type) {\r\n      case 'vanilla':\r\n      case 'vanilla-zigzag':\r\n        this.drawPatternVanila();\r\n        break;\r\n      case 'fold':\r\n      case 'fold-zigzag':\r\n      case 'flip':\r\n      case 'flip-zigzag':\r\n        this.drawPatternFlip();\r\n        break;\r\n      case 'linefold':\r\n      case 'linefold-zigzag':\r\n      case 'lineflip':\r\n      case 'lineflip-zigzag':\r\n        this.drawPatternLine();\r\n        break;\r\n    }\r\n\r\n    // 그 뒤 다시 이전 context로 restore\r\n    this.ctx.restore();\r\n  }\r\n\r\n  drawBackgroundColor() {\r\n    this.ctx.beginPath();\r\n    this.ctx.fillStyle = this.color;\r\n    this.ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);\r\n    this.ctx.closePath();\r\n  }\r\n\r\n  getXVanilla(i) {\r\n    if (this.type.includes('zigzag')) {\r\n      return i % 2 === 0 ? 0 : this.gap;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  getXFlip(i, flipType) {\r\n    // horizontal\r\n    if (flipType === 'fold') {\r\n      if (this.type.includes('zigzag')) {\r\n        return {\r\n          flip: i % 2 === 0 ? this.imgWidth : this.imgWidth + this.gap,\r\n          nonFlip: i % 2 === 0 ? this.imgWidth + this.gap : this.imgWidth + this.gap * 2,\r\n        };\r\n      }\r\n      return {\r\n        flip: this.imgWidth,\r\n        nonFlip: this.imgWidth + this.gap,\r\n      };\r\n    }\r\n    // vertical\r\n    else {\r\n      return this.getXVanilla(i);\r\n    }\r\n  }\r\n\r\n  getYFlip(flipType) {\r\n    // horizontal\r\n    if (flipType === 'fold') {\r\n      return 0;\r\n    }\r\n    // vertical\r\n    else {\r\n      return {\r\n        flip: this.imgHeight,\r\n        nonFlip: 0,\r\n      };\r\n    }\r\n  }\r\n\r\n  getXLine(flipType) {\r\n    if (flipType === 'fold') {\r\n      if (this.type.includes('zigzag')) {\r\n        return this.imgWidth + this.gap;\r\n      }\r\n      return this.imgWidth;\r\n    }\r\n    return this.type.includes('zigzag') ? this.gap : 0;\r\n  }\r\n\r\n  drawPatternVanila() {\r\n    let y = 0;\r\n    // 행\r\n    for (let i = 0; i < this.loopY; i++) {\r\n      let x = this.getXVanilla(i);\r\n      // 열\r\n      for (let j = 0; j < this.loopX; j++) {\r\n        this.ctx.drawImage(this.drawnImg, x, y, this.imgWidth, this.imgHeight);\r\n        x += this.imgWidth + this.gap;\r\n      }\r\n      y += this.imgHeight + this.gap;\r\n    }\r\n  }\r\n\r\n  drawPatternFlip() {\r\n    // fold: horizontal, flip: vertical\r\n    const flipType = this.type.includes('fold') ? 'fold' : 'flip';\r\n    const scaleH = flipType === 'fold' ? -1 : 1;\r\n    const scaleV = flipType === 'flip' ? -1 : 1;\r\n    let y = this.getYFlip(flipType);\r\n\r\n    // 행\r\n    for (let i = 0; i < this.loopY; i++) {\r\n      let x = this.getXFlip(i, flipType);\r\n      let flipFlag = false; // 플립 여부\r\n\r\n      // 열\r\n      for (let j = 0; j < this.loopX; j++) {\r\n        flipFlag = !flipFlag;\r\n        let key = flipFlag ? 'flip' : 'nonFlip';\r\n        let posX, posY;\r\n        if (flipType === 'fold') {\r\n          posX = flipFlag ? x.flip : x.nonFlip;\r\n          posY = y;\r\n        } else {\r\n          posX = x;\r\n          posY = flipFlag ? y.flip : y.nonFlip;\r\n        }\r\n\r\n        if (flipFlag) {\r\n          this.ctx.save();\r\n          this.ctx.scale(scaleH, scaleV);\r\n          if (flipType === 'fold') {\r\n            posX *= -1;\r\n          } else {\r\n            posY *= -1;\r\n          }\r\n          this.ctx.drawImage(this.drawnImg, posX, posY, this.imgWidth, this.imgHeight);\r\n          this.ctx.restore();\r\n          if (flipType === 'fold') {\r\n            posX *= -1;\r\n          } else {\r\n            posY *= -1;\r\n          }\r\n        } else {\r\n          this.ctx.drawImage(this.drawnImg, posX, posY, this.imgWidth, this.imgHeight);\r\n        }\r\n\r\n        if (flipType === 'fold') {\r\n          x[key] += (this.imgWidth + this.gap) * 2;\r\n        } else {\r\n          x += this.imgWidth + this.gap;\r\n        }\r\n      }\r\n\r\n      if (flipType === 'fold') {\r\n        y += this.imgHeight + this.gap;\r\n      } else {\r\n        y.flip += this.imgHeight + this.gap;\r\n        y.nonFlip += this.imgHeight + this.gap;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawPatternLine() {\r\n    // fold: horizontal, flip: vertical\r\n    const flipType = this.type.includes('fold') ? 'fold' : 'flip';\r\n    const scaleH = flipType === 'fold' ? -1 : 1;\r\n    const scaleV = flipType === 'flip' ? -1 : 1;\r\n    let y = flipType === 'fold' ? 0 : this.imgHeight;\r\n    let flipFlag = false; // 플립 여부\r\n\r\n    // 행\r\n    for (let i = 0; i < this.loopY; i++) {\r\n      flipFlag = !flipFlag;\r\n      let x = flipFlag ? this.getXLine(flipType) : 0;\r\n\r\n      // 열\r\n      for (let j = 0; j < this.loopX; j++) {\r\n        if (flipFlag) {\r\n          this.ctx.save();\r\n          this.ctx.scale(scaleH, scaleV);\r\n          if (flipType === 'fold') {\r\n            x *= -1;\r\n          } else {\r\n            y *= -1;\r\n          }\r\n          this.ctx.drawImage(this.drawnImg, x, y, this.imgWidth, this.imgHeight);\r\n          this.ctx.restore();\r\n          if (flipType === 'fold') {\r\n            x *= -1;\r\n          } else {\r\n            y *= -1;\r\n          }\r\n        } else {\r\n          this.ctx.drawImage(this.drawnImg, x, y, this.imgWidth, this.imgHeight);\r\n        }\r\n\r\n        x += this.imgWidth + this.gap;\r\n      }\r\n\r\n      if (flipType === 'fold') {\r\n        y += this.imgHeight + this.gap;\r\n      } else {\r\n        y = flipFlag ? y + this.gap : y + this.imgHeight + this.gap * 2;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { getSizeToKeepImageScale } from '../utils/commonUtils';\r\nimport { MyPattern } from './myPattern';\r\n\r\nexport function MyCanvas(wrapper, canvas, ctx, drawnImgSrc) {\r\n  this.wrapper = wrapper;\r\n  this.canvas = canvas;\r\n  this.ctx = ctx;\r\n  this.drawnImgSrc = drawnImgSrc;\r\n  this.drawnImg = null;\r\n\r\n  this.offsetX = canvas.offsetLeft;\r\n  this.offsetY = canvas.offsetTop;\r\n  this.points = []; // 클리핑할 영역 좌표값 담을 배열\r\n  this.isCropped = false; // crop() 함수 실행여부\r\n}\r\n\r\n// 캔버스 리사이즈 시 원본 유지\r\nMyCanvas.prototype.resizeCanvas = function (...args) {\r\n  const [width, height, canvasMode, properties] = args;\r\n  const c = document.createElement('canvas');\r\n  const cx = c.getContext('2d');\r\n\r\n  //console.log('resizeCanvas', width, properties.canvasWidth);\r\n\r\n  // 이전 캔버스 저장\r\n  c.width = this.canvas.width;\r\n  c.height = this.canvas.height;\r\n  cx.drawImage(this.canvas, 0, 0);\r\n\r\n  this.canvas.width = width;\r\n  this.canvas.height = height;\r\n\r\n  switch (canvasMode) {\r\n    case 'crop':\r\n      this.ctx.drawImage(c, 0, 0);\r\n      break;\r\n    case 'pattern':\r\n      this.makePattern(properties);\r\n      break;\r\n  }\r\n};\r\n\r\n// 캔버스 클리어하기\r\nMyCanvas.prototype.clear = function () {\r\n  this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n};\r\n\r\n// 이미지 로드하기\r\nMyCanvas.prototype.initImage = function () {\r\n  //console.log('initImage', this.drawnImgSrc.substr(20, 30));\r\n  this.clear();\r\n  this.drawnImg = new Image();\r\n  this.drawnImg.src = this.drawnImgSrc;\r\n};\r\n\r\n// 이미지 그리기 (투명도 설정)\r\nMyCanvas.prototype.drawImage = function (alpha) {\r\n  //console.log('drawImage', this.drawnImg.src.substr(20, 30));\r\n  this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n  this.ctx.globalAlpha = alpha; // 투명도 설정\r\n\r\n  // 그리기\r\n  if (this.drawnImg.width < this.canvas.width && this.drawnImg.height < this.canvas.height) {\r\n    this.ctx.drawImage(this.drawnImg, 0, 0);\r\n  } else {\r\n    // 비율 유지\r\n    const { newWidth, newHeight } = getSizeToKeepImageScale(this.drawnImg, this.canvas);\r\n    this.ctx.drawImage(this.drawnImg, 0, 0, newWidth, newHeight);\r\n  }\r\n  this.ctx.globalAlpha = 1.0;\r\n};\r\n\r\n// 마우스다운 이벤트\r\nMyCanvas.prototype.handleMouseDown = function (e) {\r\n  e.preventDefault();\r\n  e.stopPropagation();\r\n\r\n  // 마우스 좌표값 계산\r\n  let x = parseInt(e.clientX - this.offsetX);\r\n  let y = parseInt(e.clientY - this.offsetY);\r\n  if (document.documentElement.scrollTop > 0) {\r\n    y += document.documentElement.scrollTop;\r\n  } // 세로 스크롤값 적용\r\n\r\n  this.points.push({ x, y });\r\n\r\n  // 클리핑 패스 라인 그리기\r\n  this.drawOutline();\r\n\r\n  // 사용자가 처음 클릭한 좌표값을 다시 클릭할 경우, 클리핑 영역 완성시키기\r\n  if (this.points.length > 1) {\r\n    let mx = x - this.points[0].x;\r\n    let my = y - this.points[0].y;\r\n    if (mx * mx + my * my < 10 * 10) {\r\n      this.crop();\r\n    }\r\n  }\r\n};\r\n\r\n// 클리핑 패스 그리기\r\nMyCanvas.prototype.drawOutline = function () {\r\n  this.drawImage(0.7);\r\n\r\n  this.ctx.beginPath();\r\n  this.ctx.moveTo(this.points[0].x, this.points[0].y);\r\n  for (let i = 0; i < this.points.length; i++) {\r\n    this.ctx.lineTo(this.points[i].x, this.points[i].y);\r\n  }\r\n  this.ctx.closePath();\r\n  this.ctx.stroke();\r\n\r\n  this.ctx.beginPath();\r\n  this.ctx.arc(this.points[0].x, this.points[0].y, 3, 0, Math.PI * 2);\r\n  this.ctx.closePath();\r\n  this.ctx.stroke();\r\n};\r\n\r\n// 새로운 캔버스에 선택된 영역 크롭하기\r\nMyCanvas.prototype.crop = function () {\r\n  // 클리핑 영역 사이즈 계산하기\r\n  let minX = this.wrapper.offsetWidth;\r\n  let minY = this.wrapper.offsetHeight;\r\n  let maxX = 0;\r\n  let maxY = 0;\r\n  for (let i = 1; i < this.points.length; i++) {\r\n    const p = this.points[i];\r\n    if (p.x < minX) minX = p.x;\r\n    if (p.y < minY) minY = p.y;\r\n    if (p.x > maxX) maxX = p.x;\r\n    if (p.y > maxY) maxY = p.y;\r\n  }\r\n  const clippedWidth = maxX - minX;\r\n  const clippedHeight = maxY - minY;\r\n\r\n  // 이미지 크롭하기\r\n  this.ctx.save();\r\n  this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n  this.ctx.beginPath();\r\n  this.ctx.moveTo(this.points[0].x, this.points[0].y);\r\n  for (let i = 1; i < this.points.length; i++) {\r\n    const p = this.points[i];\r\n    this.ctx.lineTo(p.x, p.y);\r\n  }\r\n  this.ctx.closePath();\r\n\r\n  this.ctx.clip(); // 클립\r\n  this.drawImage(1.0); // 클리핑한 이미지 그리기\r\n  this.ctx.restore();\r\n\r\n  // 캔버스 생성\r\n  const c = document.createElement('canvas');\r\n  const cx = c.getContext('2d');\r\n  // 사이즈를 클리핑 영역에 맞추기\r\n  c.width = clippedWidth;\r\n  c.height = clippedHeight;\r\n\r\n  // 새로운 캔버스에 크롭이미지 그리기\r\n  cx.drawImage(\r\n    this.canvas,\r\n    minX,\r\n    minY,\r\n    clippedWidth,\r\n    clippedHeight,\r\n    0,\r\n    0,\r\n    clippedWidth,\r\n    clippedHeight,\r\n  );\r\n\r\n  // 새로운 이미지 생성. 기존 크롭이미지 대체\r\n  this.drawnImgSrc = c.toDataURL('image/png', 1);\r\n  this.isCropped = !this.isCropped;\r\n\r\n  // 이전 포인트 지우기\r\n  this.points.length = 0;\r\n};\r\n\r\nMyCanvas.prototype.makePattern = function (props) {\r\n  const myPattern = new MyPattern(this.wrapper, this.canvas, this.ctx, this.drawnImgSrc);\r\n  myPattern.initImage();\r\n\r\n  // 설정값 초기화\r\n  myPattern.setColor = props.color;\r\n  myPattern.setCanvasWidth = props.canvasWidth;\r\n  myPattern.setCanvasHeight = props.canvasHeight;\r\n  myPattern.setImgWidth = props.imgWidth;\r\n  myPattern.setImgHeight = props.imgHeight;\r\n  myPattern.setGap = props.gap;\r\n  myPattern.setType = props.type;\r\n\r\n  // 이미지 저장 시 myCanvas.drawnImgSrc 참조하므로 getter로 src저장\r\n  this.drawnImgSrc = myPattern.getPatternSrc;\r\n\r\n  // const my = this;\r\n  // const img = new Image();\r\n  // img.src = c.toDataURL('image/jpeg');\r\n  // img.onload = function () {\r\n  //   // 새 이미지 페이지에 삽입하기\r\n  //   my.wrapper.appendChild(this);\r\n  // };\r\n};\r\n","// 이미지 비율 유지\r\nexport const getSizeToKeepImageScale = (img, canvas) => {\r\n  const ratio = img.width / img.height;\r\n  let newWidth = canvas.width;\r\n\r\n  let newHeight = newWidth / ratio;\r\n  if (newHeight > canvas.height) {\r\n    newHeight = canvas.height;\r\n    newWidth = newHeight * ratio;\r\n  }\r\n  return { newWidth, newHeight };\r\n};\r\n\r\nexport function debounce(fn, ms) {\r\n  let timer;\r\n  return () => {\r\n    clearTimeout(timer);\r\n    timer = setTimeout(() => {\r\n      timer = null;\r\n      fn.apply(this, arguments);\r\n    }, ms);\r\n  };\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeProperties } from '../../redux/pictures';\r\nimport styled from 'styled-components';\r\n\r\nimport { debounce } from 'lodash';\r\nimport { MyCanvas } from '../../lib/myCanvas';\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\nconst CanvasBlock = styled.canvas`\r\n  background-color: #eee;\r\n`;\r\n\r\nconst Canvas = ({ setMyCanvas }) => {\r\n  const dispatch = useDispatch();\r\n  const { pictures, drawnPicture, canvasMode, properties } = useSelector(state => state.pictures);\r\n  const [canvasSize, setCanvasSize] = useState({\r\n    width: 0,\r\n    height: 0,\r\n  });\r\n  const wrapperRef = useRef();\r\n  const canvasRef = useRef();\r\n  const my = useRef(); // 캔버스\r\n  const ctx = useRef();\r\n  //console.log('Canvas', drawnPicture, properties);\r\n\r\n  // 캔버스 사이즈 변경\r\n  const handleResize = () => {\r\n    setCanvasSize({\r\n      width: wrapperRef.current.offsetWidth,\r\n      height: wrapperRef.current.offsetHeight - 1,\r\n    });\r\n  };\r\n\r\n  // 컴포넌트 마운트,언마운트 시 리사이즈 이벤트 적용\r\n  useEffect(() => {\r\n    if (wrapperRef.current && canvasRef.current) {\r\n      handleResize(); // 첫 마운트시 즉시 사이즈 적용\r\n      ctx.current = canvasRef.current.getContext('2d');\r\n    }\r\n\r\n    // debounce 적용\r\n    window.addEventListener('resize', debounce(handleResize, 1000));\r\n\r\n    return () => {\r\n      // cleanup\r\n      window.removeEventListener('resize', debounce(handleResize, 1000));\r\n    };\r\n  }, []);\r\n\r\n  // 캔버스 사이즈 재조정\r\n  useEffect(() => {\r\n    const { width, height } = canvasSize;\r\n    if (my.current) {\r\n      my.current.resizeCanvas(width, height, canvasMode, properties);\r\n    }\r\n    // properties는 deps에 넣지 않음. makePattern 중복해서 발생됨\r\n  }, [canvasSize]);\r\n\r\n  // eventListener가 동일 ref 참조할 수 있도록 함수 저장\r\n  const mousedownRef = useRef();\r\n\r\n  // 선택이미지 변경 시 캔버스 재생성\r\n  useEffect(() => {\r\n    // myCanvas 생성\r\n    const cropImgSrc = drawnPicture ? pictures.find(pic => pic.id === drawnPicture).src : null;\r\n    my.current = new MyCanvas(wrapperRef.current, canvasRef.current, ctx.current, cropImgSrc);\r\n    my.current.initImage(); // 이미지 초기화\r\n    setMyCanvas(my.current);\r\n\r\n    switch (canvasMode) {\r\n      case 'crop':\r\n        //console.log('crop!!!!');\r\n        my.current.drawnImg.onload = function () {\r\n          my.current.drawImage(1.0);\r\n        };\r\n        mousedownRef.current = function (e) {\r\n          my.current.handleMouseDown(e);\r\n        }; // 함수 저장\r\n        my.current.canvas.addEventListener('mousedown', mousedownRef.current);\r\n        break;\r\n      case 'pattern':\r\n        //console.log('pattern!!!!');\r\n        my.current.makePattern(properties);\r\n        break;\r\n      case 'clear':\r\n        //console.log('clear!!!!');\r\n        // clear canvas\r\n        my.current.clear();\r\n        break;\r\n    }\r\n\r\n    return () => {\r\n      if (my.current) {\r\n        my.current.canvas.removeEventListener('mousedown', mousedownRef.current);\r\n      }\r\n    };\r\n  }, [drawnPicture, pictures, canvasMode, setMyCanvas, properties]);\r\n\r\n  return (\r\n    <Wrapper ref={wrapperRef}>\r\n      <CanvasBlock ref={canvasRef} />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default React.memo(Canvas);\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeDrawnPicture, changeCanvasMode, addPicture } from '../../redux/pictures';\r\n\r\nimport SVG from '../common/SVG';\r\nimport Button from '../common/Button';\r\nimport TopButtons from '../layout/tabPanel/TopButtons';\r\nimport Content from '../layout/tabPanel/Content';\r\nimport Canvas from '../parts/Canvas';\r\n\r\nconst CanvasContainer = () => {\r\n  //console.log('CanvasContainer');\r\n  const dispatch = useDispatch();\r\n  const { canvasMode } = useSelector(state => state.pictures);\r\n  const [myCanvas, setMyCanvas] = useState(null);\r\n\r\n  const onClear = () => {\r\n    dispatch(changeDrawnPicture(null));\r\n    dispatch(changeCanvasMode('clear'));\r\n  };\r\n\r\n  const onSave = () => {\r\n    if (!canvasMode) {\r\n      alert('⚠ 편집 중인 이미지가 없습니다 ⚠');\r\n      return;\r\n    }\r\n    const payload = {\r\n      type: canvasMode,\r\n      src: myCanvas.drawnImgSrc,\r\n    };\r\n    dispatch(addPicture(payload));\r\n    dispatch(changeDrawnPicture(null));\r\n    dispatch(changeCanvasMode(null));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TopButtons>\r\n        <Button padding=\"5px\" margin=\"0 5px 0 0\" onClick={onSave} aria-label=\"저장\">\r\n          <SVG\r\n            width=\"15\"\r\n            height=\"15\"\r\n            path=\"M15.003 3h2.997v5h-2.997v-5zm8.997 1v20h-24v-24h20l4 4zm-19 5h14v-7h-14v7zm16 4h-18v9h18v-9z\"\r\n          />\r\n        </Button>\r\n        {/* <Button padding=\"5px\" margin=\"0 5px 0 0\" onClick={onClear}>\r\n          CLEAR!\r\n        </Button> */}\r\n      </TopButtons>\r\n      <Content>\r\n        <Canvas setMyCanvas={setMyCanvas} />\r\n      </Content>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(CanvasContainer);\r\n","import React, { useState, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { changeCanvasMode, changeDrawnPicture, clearSelectedPictures } from '../../redux/pictures';\r\n\r\nimport TabPanel from '../layout/tabPanel';\r\nimport ImagesContainer from './ImagesContainer';\r\nimport PatternsContainer from './PatternsContainer';\r\nimport CanvasContainer from './CanvasContainer';\r\n\r\nconst TabPanelContainer = ({ target }) => {\r\n  const dispatch = useDispatch();\r\n  const tabs = target === 'SIDEBAR' ? ['IMAGES', 'PATTERN'] : ['CANVAS'];\r\n  const tabCompObj =\r\n    target === 'SIDEBAR'\r\n      ? {\r\n          0: <ImagesContainer />,\r\n          1: <PatternsContainer />,\r\n        }\r\n      : { 0: <CanvasContainer /> };\r\n\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const handleTab = useCallback(id => {\r\n    setActiveTab(id);\r\n    // 초기화\r\n    dispatch(clearSelectedPictures());\r\n    dispatch(changeDrawnPicture(null));\r\n    switch (id) {\r\n      case 0: //IMAGES\r\n        dispatch(changeCanvasMode(null));\r\n        break;\r\n      case 1:\r\n        dispatch(changeCanvasMode('pattern'));\r\n        break;\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <TabPanel target={target} tabs={tabs} activeTab={activeTab} handleTab={handleTab}>\r\n      {tabCompObj[activeTab]}\r\n    </TabPanel>\r\n  );\r\n};\r\n\r\nexport default React.memo(TabPanelContainer);\r\n","import React from 'react';\n\nimport Main from './components/layout/Main';\nimport TabPanelContainer from './components/container/TabPanelContainer';\n\nconst App = () => {\n  return (\n    <Main>\n      <TabPanelContainer target=\"SIDEBAR\" />\n      <TabPanelContainer target=\"CANVAS\" />\n    </Main>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux';\r\nimport { all } from 'redux-saga/effects';\r\nimport pictures, { pictureSaga } from './pictures';\r\n\r\nconst rootReducer = combineReducers({ pictures });\r\n\r\nexport function* rootSaga() {\r\n  yield all([pictureSaga()]);\r\n}\r\n\r\nexport default rootReducer;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n:root {\r\n  --darkest-gray: #202020;\r\n  --dark-gray: #333;\r\n  --middle-gray: #555;\r\n  --border-dark-gray: #7777777a;\r\n  --border-light-gray: #aaaaaaba;\r\n  --lightest-gray: #eee;\r\n}\r\n* {\r\n  box-sizing: border-box;\r\n  &::-webkit-scrollbar {\r\n    width: 10px;\r\n  }\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: var(--border-light-gray);\r\n  }\r\n  &::-webkit-scrollbar-track {\r\n    background-color: var(--dark-gray);\r\n  }\r\n  &[aria-label] {\r\n    position: relative;\r\n  }\r\n  &[aria-label]::after{\r\n    content: attr(aria-label);\r\n    opacity: 0;\r\n    position: absolute;\r\n    top: calc(100% + 3px);\r\n    left: 0;\r\n    padding: 3px;\r\n    background-color: var(--dark-gray);\r\n    font-size: 0.7rem;\r\n    white-space: nowrap;\r\n  }\r\n  &[aria-label]:hover::after {\r\n    opacity: 1;\r\n    transition: 0.2s ease-in-out;\r\n  }\r\n}\r\nhtml, body, #root {\r\n  width: 100vw;\r\n  height: 100vh;\r\n}\r\nbody {\r\n  color: var(--lightest-gray);\r\n  font-family: 'Noto Sans KR', sans-serif;\r\n}\r\na,\r\nabbr,\r\nacronym,\r\naddress,\r\napplet,\r\narticle,\r\naside,\r\naudio,\r\nb,\r\nbig,\r\nblockquote,\r\nbody,\r\ncanvas,\r\ncaption,\r\ncenter,\r\ncite,\r\ncode,\r\ndd,\r\ndel,\r\ndetails,\r\ndfn,\r\ndiv,\r\ndl,\r\ndt,\r\nem,\r\nembed,\r\nfieldset,\r\nfigcaption,\r\nfigure,\r\nfooter,\r\nform,\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5,\r\nh6,\r\nheader,\r\nhgroup,\r\nhtml,\r\ni,\r\niframe,\r\nimg,\r\nins,\r\nkbd,\r\nlabel,\r\nlegend,\r\nli,\r\nmain,\r\nmark,\r\nmenu,\r\nnav,\r\nobject,\r\nol,\r\noutput,\r\np,\r\npre,\r\nq,\r\nruby,\r\ns,\r\nsamp,\r\nsection,\r\nsmall,\r\nspan,\r\nstrike,\r\nstrong,\r\nsub,\r\nsummary,\r\nsup,\r\ntable,\r\ntbody,\r\ntd,\r\ntfoot,\r\nth,\r\nthead,\r\ntime,\r\ntr,\r\ntt,\r\nu,\r\nul,\r\nvar,\r\nvideo {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  vertical-align: baseline;\r\n}\r\narticle,\r\naside,\r\ndetails,\r\nfigcaption,\r\nfigure,\r\nfooter,\r\nheader,\r\nhgroup,\r\nmain,\r\nmenu,\r\nnav,\r\nsection {\r\n  display: block;\r\n}\r\n[hidden] {\r\n  display: none;\r\n}\r\nbody {\r\n  line-height: 1;\r\n}\r\nmenu,\r\nol,\r\nul {\r\n  list-style: none;\r\n}\r\nblockquote,\r\nq {\r\n  quotes: none;\r\n}\r\nblockquote:after,\r\nblockquote:before,\r\nq:after,\r\nq:before {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\na {\r\n  text-decoration: none;\r\n}\r\nbutton {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 0;\r\n  margin: 0;\r\n  border: 0;\r\n  outline: 0;\r\n  cursor: pointer;\r\n}\r\ninput, textarea, select, option {\r\n  background: none;\r\n  padding: 0;\r\n  color: #333;\r\n  border: 0;\r\n  outline: 0;\r\n  font-family: 'Noto Sans KR', sans-serif;\r\n}\r\ninput, select, option {\r\n  cursor: pointer;\r\n}\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer, { rootSaga } from './redux';\nimport GlobalStyle from './utils/style/global';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <GlobalStyle />\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}